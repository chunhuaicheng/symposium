<?php
require_once 'includes/checkpoint.inc';
require_once 'includes/symposium.inc';
require_once 'includes/messages.inc';
require_once 'includes/moderation.inc';

function symposium_init() {
    drupal_add_css (drupal_get_path ( 'module', 'symposium' ) . '/theme/symposium.css' );
}

/*
 * Set up the conferences, add a value to the arrays to create a new conference
 */
function symposium_get_settings() {
  // Get all symposium nodes
  $results = 
    db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('type', 'symposium')
    ->execute();
  $ids = array();
  while ($node = $results->fetchObject()) {
    array_push($ids, $node->nid);
  }
  $nodes = entity_load('node', $ids);
  
  // populate settings
  $settings = array();
  foreach ($nodes AS $n) {
    $id = $n->field_symposium_short_name['und'][0]['value'];
    $setting = new stdClass();
    
    // title
    $setting->title = $n->title;
    
    // open years
    $years = array();
    if (isset($n->field_symposium_year['und'])) {
      foreach ($n->field_symposium_year['und'] AS $year) {
        array_push($years, $year['value']);
      }
    }
    $setting->years =$years;

    // closed years
    $results = 
      db_select('node_type', 'nt')
        ->fields('nt', array('type'))
        ->condition('type', $id . '_%_registration' , 'LIKE')
        ->execute();
    $closed = array();
    while ($ntypes = $results->fetchObject()) {
      $matched_year = preg_replace('/' . $id . '_(.+?)_registration/', '\1', $ntypes->type);
      if(!in_array($matched_year, $years)) {
        array_push($closed, $matched_year);
      }
    }
    $setting->closed = $closed;
    
    // roles for registration
    $roles = array();
    if (isset($n->field_symposium_roles['und'])) {
      foreach ($n->field_symposium_roles['und'] AS $role) {
        array_push($roles, $role['value']);
      }
    }
    $setting->roles =$roles;
    
    // role allowed for registration even when it's closed 
    $setting->late_role =  isset($n->field_symposium_late_role['und']) ? $n->field_symposium_late_role['und'][0]['value'] : '';
    
    // payment site
    $setting->payment_site =  isset($n->field_symposium_payment_site['und']) ? $n->field_symposium_payment_site['und'][0]['value'] : '';
    
    // payment url
    $setting->payment_url =  isset($n->field_symposium_payment_url['und']) ? $n->field_symposium_payment_url['und'][0]['value'] : '';
    
    $settings[$id] = $setting;
  }
  return $settings;
}

function  symposium_menu () {
  $settings = symposium_get_settings();
  
  $items = array();
  foreach ($settings AS $id => $setting) {
    $title = $setting->title;
    $years = $setting->years;
    $roles = $setting->roles;
    $closed = $setting->closed;
    $late_role = $setting->late_role;
    foreach ($years AS $year) {
      $items ["symposium/$id/$year/registration"] = array (
        'title' => "$title $year Registration",
        'page callback' => 'symposium_registration_check',
        'page arguments' => array(1, 2),
        'type' => MENU_CALLBACK,
        'access arguments' => array('access content'),
      );
      
      $items ["symposium/$id/$year/abstract_submission"] = array (
        'title' => "$title $year Abstract Submission",
        'page callback' => 'symposium_abstract_submission_check',
        'page arguments' => array(1, 2),
        'type' => MENU_CALLBACK,
        'access arguments' => array('access content'),
      );
    }
    foreach ($closed AS $year) {
      $items ["symposium/$id/$year/registration"] = array (
        'title' => "$title $year Registration",
        'page callback' => 'symposium_registration_check',
        'page arguments' => array(1, 2),
        'type' => MENU_CALLBACK,
        'access arguments' => array('access content'),
      );
      
      $items ["symposium/$id/$year/abstract_submission"] = array (
        'title' => "$title $year Abstract Submission",
        'page callback' => 'symposium_abstract_submission_check',
        'page arguments' => array(1, 2),
        'type' => MENU_CALLBACK,
        'access arguments' => array('access content'),
      );
    }
  }
  
  $items ["symposium/mysubmission/%/%"] = array (
    'title' => "My submission",
    'page callback' => 'symposium_mysubmission',
    'page arguments' => array(2, 3),
    'type' => MENU_CALLBACK,
    'access arguments' => array('view own unpublished content'),
  );
  return $items;
}

/**
 * Implements hook_block_info().
 */
function symposium_block_info() {
  $settings = symposium_get_settings();
  $blocks = array();
  foreach ($settings AS $id => $setting) {
    $title = $setting->title;
    $years = $setting->years;
    $closed = $setting->closed;
    foreach ($years AS $year) {
      if (!in_array($year, $closed)) {
        $blocks['symposium-' . $id . '-' . $year]['info'] = $title . ' ' . $year;
        $blocks['symposium-' . $id . '-' . $year]['cache'] = DRUPAL_CACHE_GLOBAL;
      }
    }
  }    
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function symposium_block_view($delta = '') {
    $block = array();
    $settings = symposium_get_settings();
    foreach ($settings AS $id => $setting) {
        $title = $setting->title;
        $years = $setting->years;
        $closed = $setting->closed;
        foreach ($years AS $year) {
          if (!in_array($year, $closed)) {
            if ($delta == 'symposium-' . $id . '-' . $year) {
              $block['subject'] = $title . ' ' . $year;
              $block['content'] = 
                t("<ul>
                   <li><a href=\"@register\">Register</a></li>
                   <li><a href=\"@abstract\">Submit Abstract</a></li>",
                array(
                  '@register' => url("symposium/$id/$year/registration"),
                  '@abstract' => url("symposium/$id/$year/abstract_submission")
                )
              );
              $access = user_access('view own unpublished content');
              if ($access) {
                  $block['content'] .= t("<li><a href=\"@submission\">My submission</a></li>", array('@submission' => url("symposium/mysubmission/$id/$year")));
              }
              $block['content'] .= t("<li><a href=\"@pub\">Current Publication</a></li>", array('@pub' => url("symposium/list/abstract/$id" . "_" . $year . "_abstract")));
              $access = user_access('administer nodes');
              if ($access) {
                  $block['content'] .= t("<li><a href=\"@registered\">Registered Users</a></li></ul>", array('@registered' => url("symposium/list/registration/$id" . "_" . $year . "_registration")));
              } else {
                  $block['content'] .= t("</ul>");
              }
            }
          }
        }
    }
    return $block;
}

/**
 * Implementation of hook_views_api().
 */
function symposium_views_api() {
    return array(
        'api' => 3.0,
        'path' => drupal_get_path('module', 'symposium')
    );
}

/**
 * Implementation of hook_views_default_views().
 */
function symposium_views_default_views() {
    
    /**
     * Current Publication/Abstracts
     */
    $view = new view();
    $view->name = 'abstracts';
    $view->description = '';
    $view->tag = 'default';
    $view->base_table = 'node';
    $view->human_name = 'abstracts';
    $view->core = 7;
    $view->api_version = '3.0';
    $view->disabled = FALSE; /* Edit this to true to make a default view disabled initially */
    
    /* Display: Master */
    $handler = $view->new_display('default', 'Master', 'default');
    $handler->display->display_options['use_more_always'] = FALSE;
    $handler->display->display_options['access']['type'] = 'perm';
    $handler->display->display_options['cache']['type'] = 'none';
    $handler->display->display_options['query']['type'] = 'views_query';
    $handler->display->display_options['exposed_form']['type'] = 'basic';
    $handler->display->display_options['pager']['type'] = 'full';
    $handler->display->display_options['pager']['options']['items_per_page'] = '10';
    $handler->display->display_options['style_plugin'] = 'default';
    $handler->display->display_options['row_plugin'] = 'node';
    $handler->display->display_options['row_options']['view_mode'] = 'full';
    /* Field: Content: Title */
    $handler->display->display_options['fields']['title']['id'] = 'title';
    $handler->display->display_options['fields']['title']['table'] = 'node';
    $handler->display->display_options['fields']['title']['field'] = 'title';
    $handler->display->display_options['fields']['title']['label'] = '';
    $handler->display->display_options['fields']['title']['alter']['word_boundary'] = FALSE;
    $handler->display->display_options['fields']['title']['alter']['ellipsis'] = FALSE;
    /* Sort criterion: Content: Post date */
    $handler->display->display_options['sorts']['created']['id'] = 'created';
    $handler->display->display_options['sorts']['created']['table'] = 'node';
    $handler->display->display_options['sorts']['created']['field'] = 'created';
    $handler->display->display_options['sorts']['created']['order'] = 'DESC';
    /* Contextual filter: Content: Type */
    $handler->display->display_options['arguments']['type']['id'] = 'type';
    $handler->display->display_options['arguments']['type']['table'] = 'node';
    $handler->display->display_options['arguments']['type']['field'] = 'type';
    $handler->display->display_options['arguments']['type']['default_action'] = 'default';
    $handler->display->display_options['arguments']['type']['default_argument_type'] = 'fixed';
    $handler->display->display_options['arguments']['type']['default_argument_options']['argument'] = 'No results';
    $handler->display->display_options['arguments']['type']['summary']['number_of_records'] = '0';
    $handler->display->display_options['arguments']['type']['summary']['format'] = 'default_summary';
    $handler->display->display_options['arguments']['type']['summary_options']['items_per_page'] = '25';
    $handler->display->display_options['arguments']['type']['limit'] = '0';
    /* Filter criterion: Content: Published */
    $handler->display->display_options['filters']['status']['id'] = 'status';
    $handler->display->display_options['filters']['status']['table'] = 'node';
    $handler->display->display_options['filters']['status']['field'] = 'status';
    $handler->display->display_options['filters']['status']['value'] = 1;
    $handler->display->display_options['filters']['status']['group'] = 1;
    $handler->display->display_options['filters']['status']['expose']['operator'] = FALSE;
    
    /* Display: Page */
    $handler = $view->new_display('page', 'Page', 'page');
    $handler->display->display_options['path'] = 'symposium/list/abstract';
       
    $views[$view->name] = $view;
    
    /**
     * Registered Users
     */
    $view = new view();
    $view->name = 'registration';
    $view->description = '';
    $view->tag = 'default';
    $view->base_table = 'node';
    $view->human_name = 'registration';
    $view->core = 7;
    $view->api_version = '3.0';
    $view->disabled = FALSE; /* Edit this to true to make a default view disabled initially */
    
    /* Display: Master */
    $handler = $view->new_display('default', 'Master', 'default');
    $handler->display->display_options['use_more_always'] = FALSE;
    $handler->display->display_options['access']['type'] = 'role';
    $handler->display->display_options['access']['role'] = array(
        3 => '3',
    );
    $handler->display->display_options['cache']['type'] = 'none';
    $handler->display->display_options['query']['type'] = 'views_query';
    $handler->display->display_options['exposed_form']['type'] = 'basic';
    $handler->display->display_options['pager']['type'] = 'full';
    $handler->display->display_options['pager']['options']['items_per_page'] = '10';
    $handler->display->display_options['style_plugin'] = 'table';
    $handler->display->display_options['style_options']['columns'] = array(
        'title' => 'title',
    );
    $handler->display->display_options['style_options']['default'] = '-1';
    $handler->display->display_options['style_options']['info'] = array(
        'title' => array(
            'sortable' => 0,
            'default_sort_order' => 'asc',
            'align' => '',
            'separator' => '',
            'empty_column' => 0,
        ),
    );
    /* Relationship: Content: Author */
    $handler->display->display_options['relationships']['uid']['id'] = 'uid';
    $handler->display->display_options['relationships']['uid']['table'] = 'node';
    $handler->display->display_options['relationships']['uid']['field'] = 'uid';
    $handler->display->display_options['relationships']['uid']['required'] = TRUE;
    /* Field: Content: Title */
    $handler->display->display_options['fields']['title']['id'] = 'title';
    $handler->display->display_options['fields']['title']['table'] = 'node';
    $handler->display->display_options['fields']['title']['field'] = 'title';
    $handler->display->display_options['fields']['title']['label'] = 'Status';
    $handler->display->display_options['fields']['title']['alter']['word_boundary'] = FALSE;
    $handler->display->display_options['fields']['title']['alter']['ellipsis'] = FALSE;
    $handler->display->display_options['fields']['title']['element_label_colon'] = FALSE;
    $handler->display->display_options['fields']['title']['link_to_node'] = FALSE;
    /* Field: Content: Requests */
    $handler->display->display_options['fields']['field_symposium_requests']['id'] = 'field_symposium_requests';
    $handler->display->display_options['fields']['field_symposium_requests']['table'] = 'field_data_field_symposium_requests';
    $handler->display->display_options['fields']['field_symposium_requests']['field'] = 'field_symposium_requests';
    $handler->display->display_options['fields']['field_symposium_requests']['delta_offset'] = '0';
    $handler->display->display_options['fields']['field_symposium_requests']['separator'] = '<br>';
    /* Field: User: Name */
    $handler->display->display_options['fields']['name']['id'] = 'name';
    $handler->display->display_options['fields']['name']['table'] = 'users';
    $handler->display->display_options['fields']['name']['field'] = 'name';
    $handler->display->display_options['fields']['name']['relationship'] = 'uid';
    $handler->display->display_options['fields']['name']['label'] = 'User';
    /* Sort criterion: Content: Post date */
    $handler->display->display_options['sorts']['created']['id'] = 'created';
    $handler->display->display_options['sorts']['created']['table'] = 'node';
    $handler->display->display_options['sorts']['created']['field'] = 'created';
    $handler->display->display_options['sorts']['created']['order'] = 'DESC';
    /* Contextual filter: Content: Type */
    $handler->display->display_options['arguments']['type']['id'] = 'type';
    $handler->display->display_options['arguments']['type']['table'] = 'node';
    $handler->display->display_options['arguments']['type']['field'] = 'type';
    $handler->display->display_options['arguments']['type']['default_action'] = 'default';
    $handler->display->display_options['arguments']['type']['default_argument_type'] = 'fixed';
    $handler->display->display_options['arguments']['type']['default_argument_options']['argument'] = 'No results';
    $handler->display->display_options['arguments']['type']['summary']['number_of_records'] = '0';
    $handler->display->display_options['arguments']['type']['summary']['format'] = 'default_summary';
    $handler->display->display_options['arguments']['type']['summary_options']['items_per_page'] = '25';
    $handler->display->display_options['arguments']['type']['limit'] = '0';
    /* Filter criterion: Content: Published */
    $handler->display->display_options['filters']['status']['id'] = 'status';
    $handler->display->display_options['filters']['status']['table'] = 'node';
    $handler->display->display_options['filters']['status']['field'] = 'status';
    $handler->display->display_options['filters']['status']['value'] = '0';
    $handler->display->display_options['filters']['status']['group'] = 1;
    $handler->display->display_options['filters']['status']['expose']['operator'] = FALSE;
    
    /* Display: Page */
    $handler = $view->new_display('page', 'Page', 'page');
    $handler->display->display_options['path'] = 'symposium/list/registration';
    
    $views[$view->name] = $view;
    
    return $views;
}